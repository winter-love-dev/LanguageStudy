// Origin : https://github.com/JakeWharton/SdkSearch/blob/master/gradle/projectDependencyGraph.gradle
/**
 * Check dependency graph (requires Java 21)
 * Usage:
 *   ./gradlew projectInverseDependencyGraph
 *   or
 *   JAVA_HOME="/Applications/Android Studio.app/Contents/jbr/Contents/Home" ./gradlew projectInverseDependencyGraph
 */
tasks.register('projectInverseDependencyGraph') {
    doLast {
        def inverseGraph = inverseGenerateGraph()

        println("[All graph]")
        inverseGraph.forEach { key, value ->
            println "${key}"
            println "> ${value.join(", ")}"
        }

        // find module
        if (project.hasProperty("findModule")) {
            def findModule = ":" + project.property("findModule")
            println ""
            println "==============="
            println "Find '[${findModule}]' module"

            List<Project> checkModule = inverseGraph.find {
                findModule == it.key
            }.value.collectNested {
                inverseGraph[it] ?: []
            }.flatten().toSet().sort()

            checkModule.forEach {
                println "> ${it}"
            }
            println "==============="
            println ""
        }
    }
}

private LinkedHashMap<String, List<String>> inverseGenerateGraph() {
    def rootProjects = []
    def queue = [rootProject]
    while (!queue.isEmpty()) {
        def project = queue.remove(0)
        rootProjects.add(project.path)
        queue.addAll(project.childProjects.values())
    }

    def projects = new LinkedHashSet<String>()
    def dependencies = new LinkedHashMap<String, List<String>>()

    queue = [rootProject]
    while (!queue.isEmpty()) {
        def project = queue.remove(0)
        queue.addAll(project.childProjects.values())
        project.configurations.configureEach { config ->
            config.dependencies
                    .withType(ProjectDependency)
                    .collect { it.path }
                    .each { dependency ->
                        projects.add(project.path)
                        projects.add(dependency)
                        rootProjects.remove(dependency)

                        def value = dependencies.computeIfAbsent(dependency) { new ArrayList<String>() }
                        if (config.name.toLowerCase().endsWith('implementation')) {
                            value.add(project.path)
                        }
                    }
        }
    }

    projects = projects.sort { it }
    return dependencies.findAll { !it.value.isEmpty() }
}